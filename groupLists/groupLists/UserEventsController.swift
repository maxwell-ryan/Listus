//
//  UserEventsController.swift
//  groupLists
//
//  Created by Kyle Cross on 10/19/17.
//  Copyright Â© 2017 bergerMacPro. All rights reserved.
//

import Foundation
import Firebase

class UserEventsController {
    
    var events: [Event] = []
    var ref : DatabaseReference!
    
    func initUserEvents(welcomeViewController: WelcomeViewController, userId: String) {
        // Init array of events from DB here
        getDBEvents(user: userId)
        
        // Segue to inital view after logging in
        welcomeViewController.performSegue(withIdentifier: "showUser", sender: nil)
    }
    
    func initUserEvents(logInViewController: LogInViewController, userId: String) {
        // Init array of events from DB here
        getDBEvents(user: userId)
        
        // Segue to inital view after logging in
        logInViewController.performSegue(withIdentifier: "showUser", sender: nil)
    }
    
    
    //creates an event, appends it to events array, and returns idx of appended event
    func createEvent(name: String, id: String, date: Date) -> Int {
        //////////////////////////////////////////////////////////////////////////
        // id should be set by database?                                        //
        // what about event description?                                        //
        // how do I get current user info?                                      //
        //   or should we just pass it in?                                      //
        //////////////////////////////////////////////////////////////////////////
        
        //send data to firebase
        ref = Database.database().reference()
        //gets autogenerated id
        let eventRef = ref.child(DB.events).childByAutoId()
        //set values of item
        //do we really need to have an id property within the event?
        eventRef.setValue(["name": name, "date": date, "description": "some description", "id": eventRef.key])
        
        //add the event to the users events list
        ref.child(DB.users).child(/*userId*/).child(DB.events).setValue(["name": eventRef.key, "value": 1])
        
        events.append(Event(name: name, id: id, date: date))
        
        return events.count - 1
    }
    
    //removes event at index given, returns true if removal successful, returns false if index argument is invalid
    func removeEvent(index: Int) -> Bool {
        
        if index <= events.count - 1 {
            events.remove(at: index)
            return true
        } else {
            return false
        }
        
    }
    
    //get user's events from FireBase
    func getDBEvents(user: String) {
        ref = Database.database().reference()
        var events_list: [String] = []
        
        //first get array of the user's events' ids
        ref.child(DB.users).child(user).observeSingleEvent(of: .value, with: { (snapshot) in
            let user_events = snapshot.value as? NSDictionary
            for event in user_events! {
                if event.key as? String == "events" {
                    for e in (event.value as? NSDictionary)! {
                        events_list.append(e.key as! String)
                    }
                }
            }
            
            //then append the events to the events array
            for e in events_list {
                self.ref.child(DB.events).child(e).observeSingleEvent(of: .value, with: { (snapshot) in
                    let event = snapshot.value as? NSDictionary
                    let id = event!["key"] as? String ?? ""
                    let description = event!["description"] as? String ?? ""
                    let name = event!["name"] as? String ?? ""
                    let date = event!["date"] as? Date ?? Date()
                    let temp_event = Event(name: name, id: id , date: date)
                    temp_event.description = description
                    
                    self.events.append(temp_event)
                }) { (error) in
                    print(error.localizedDescription)
                }
            }
        }) { (error) in
            print(error.localizedDescription)
        }
        
    }
}
