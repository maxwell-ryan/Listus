//
//  UserEventsController.swift
//  groupLists
//
//  Created by Kyle Cross on 10/19/17.
//  Copyright Â© 2017 bergerMacPro. All rights reserved.
//
import Foundation
import Firebase

class UserEventsController {
    
    var events: [Event] = []
    var ref : DatabaseReference!
    
    
    //creates an event, appends it to events array, and returns idx of appended event
    func createEvent(name: String, description: String, date: Date, userController:
        UserController, eventCollectionView: UICollectionView) -> Void {
        
        //format date as string for firebase
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        let dateString = formatter.string(from: date)

    
        //send data to firebase
        ref = Database.database().reference()
        
        //gets autogenerated id
        let eventRef = ref.child(DB.events).childByAutoId()
        
        //set values of event
        eventRef.setValue([DB.name: name, DB.date: dateString, DB.description: description])
        
        //add the event to the users events list
        ref.child(DB.users).child(userController.user.id).child(DB.events).child(eventRef.key).setValue(true)
        
        events.append(Event(name: name, id: eventRef.key, date: date, description: description))
        
        eventCollectionView.reloadData()
        
        //return events.count - 1
    }
    
    //removes event at index given, returns true if removal successful, returns false if index argument is invalid
    func removeEvent(index: Int) -> Bool {
        
        if index <= events.count - 1 {
            events.remove(at: index)
            return true
        } else {
            return false
        }
        
    }
    
    //get user's events from FireBase
    func getDBEvents(userId: String, eventCollectionView: UICollectionView) {
        ref = Database.database().reference()
        var events_list: [String] = []
        
        //first get array of the user's events' ids
        ref.child(DB.users).child(userId).observeSingleEvent(of: .value, with: { (snapshot) in
            let user_events = snapshot.value as? NSDictionary
            for event in user_events! {
                if event.key as? String == "events" {
                    for e in (event.value as? NSDictionary)! {
                        events_list.append(e.key as! String)
                    }
                }
            }
            
            //then append the events to the events array
            for e in events_list {
                self.ref.child(DB.events).child(e).observeSingleEvent(of: .value, with: { (snapshot) in
                    let event = snapshot.value as? NSDictionary
                    let id = event?["key"] as? String ?? ""
                    let description = event?["description"] as? String ?? ""
                    let name = event?["name"] as? String ?? ""
                    let dateString = event?["date"] as? String ?? "0000-00-00 00:00:00"
                    
                    // format date from string to date type
                    let formatter = DateFormatter()
                    formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
                    let date = formatter.date(from: dateString)

                    let temp_event = Event(name: name, id: id , date: date!, description: description)
                    
                    self.events.append(temp_event)
                    
                    eventCollectionView.reloadData()
                }) { (error) in
                    print(error.localizedDescription)
                }
            }
        }) { (error) in
            print(error.localizedDescription)
        }
        
    }
}
